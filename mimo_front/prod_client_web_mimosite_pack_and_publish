@Library('jenkinslib') _  
//调用方法库文件
def tools = new org.devops.tools()
def mimo = new org.devops.mimo()

def skipRemainingStages = false   //当前节点是否跳过
def input_message   //提示语
def randomToken    //发布秘钥
def skipadminUser = false


pipeline {

    agent {
        label 'slave1'
    }

    options {
        timestamps() // 在日志中打印时间
        skipDefaultCheckout() // 删除隐式的checkout scm 语句
        timeout(time:1, unit:'HOURS') // 流水线超时设置为1H
    }

    parameters {
        
        // 基本参数/传参

        string(
            name: "RepoUrl",
            defaultValue: '$GITLAB/mimo-web-mimosite.git',
            description: '代码仓库地址'
        )


        string(
            name: 'AppCDN', 
            defaultValue: 'https://res.mimo.immo/packages/mimo', 
            description: 'appcdn'
        )

        string(
            name: 'Version', 
            defaultValue: '1.2.2', 
            description: 'apk包版本'
        )

        string(
            name: 'Tag', 
            defaultValue: 'main', 
            description: '默认分支或者Tag'
        )

    }

    environment {


        // 传参转为环境变量
        tag = "$params.Tag"
        url = "$params.RepoUrl"
        appcdn = "$params.AppCDN"
        version = "$params.Version"



        //生成随机数0-10000
        max = 100000
        randomToken = "${Math.abs(new Random().nextInt(max+1))}"
        adminUser = "" // 审批人员姓名
        approvalDD = ""   //审批人telegram名称
        approval = "" // 是否需要审批


    }

    stages{

        stage('检出最新代码.') {
            steps{
                script {
                    tools.GitCheckOut(tag, url)
                }
            }
        }

        stage('输出与最近一次构建的差异.'){
            steps{
                script{
                    tools.LastChanges()
                }
            }
        }

        stage('打dist包并构建镜像上传.'){
            steps{
                script{
                sh """
chmod 777 ./build
rm -rf ./build
# 运行docker打包
docker run -i --rm --name nodejs_mimosite -u root -e REACT_APP_CDN=$appcdn -e REACT_APP_APKVERSION=$version -v "/home/jenkins/workspace/prod_client_web_mimosite_pack_and_publish:/mimo-site" nodejs_client_web_mimosite:latest "yarn" "build"

# relogin
docker logout
docker login --username AWS 024905375334.dkr.ecr.ap-southeast-1.amazonaws.com -p `aws ecr --profile mmdevops get-login-password --region ap-southeast-1`

# build and tag 
docker build -t 024905375334.dkr.ecr.ap-southeast-1.amazonaws.com/infras:mmsite_prod -f deploy/docker/Dockerfile .

# push the image
docker push 024905375334.dkr.ecr.ap-southeast-1.amazonaws.com/infras:mmsite_prod

"""
                }
            }
        }
        stage('部署.') {
            steps{
                sshPublisher(publishers: [sshPublisherDesc(configName: 'AwsEksJumpServer', transfers: [sshTransfer(cleanRemote: false, excludes: '', 
                execCommand: '''
                # generate the kubernetes yaml config
                /home/RD.Center/eks/genDeploy/genDeploy aws-ecr-key 024905375334.dkr.ecr.ap-southeast-1.amazonaws.com/infras prod prod 1 mimosite.mimo.immo mimo mmsite /home/RD.Center/jenkins/prod_mmsite_web_eks_deploy / arn:aws:acm:ap-southeast-1:024905375334:certificate/af277c1b-a5b9-4c1c-93c6-ebc1ea340390
                kubectl delete deployment -n mimo-prod `kubectl get deployment -n mimo-prod|grep mmsite|awk '{print $1}'|grep -v NAME`
                kubectl apply -f deployment.yaml
                kubectl apply -f service.yaml

                ''', 
                execTimeout: 12000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: '/jenkins/prod_mmsite_web_eks_deploy', remoteDirectorySDF: false, removePrefix: '', 
                sourceFiles: '')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: true)])
            }
        }
    }

    
    post {
        always {
            wrap([$class: 'BuildUser']) {
                script{
                    // 邮件
                    // emailext body: '$DEFAULT_CONTENT', mimeType: 'text/html', subject: '$DEFAULT_SUBJECT', to: '$DEFAULT_RECIPIENTS'
                    // emailext body: '$DEFAULT_CONTENT', mimeType: 'text/html', subject: '$DEFAULT_SUBJECT', to: "${env.BUILD_USER}"
                    //telegram通知
                    result = "${currentBuild.currentResult}"
                    // tools.Notify(envi,result)
                }
            }
        }
    }

}
