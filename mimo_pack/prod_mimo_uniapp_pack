@Library('jenkinslib') _  
//调用方法库文件
def tools = new org.devops.tools()
def mimo = new org.devops.mimo()

def skipRemainingStages = false   //当前节点是否跳过
def input_message   //提示语
def randomToken    //发布秘钥
def skipadminUser = false
def aborted = false
def comment


pipeline {

    agent {
        label 'macos4'
    }

    options {
        timestamps() // 在日志中打印时间
        skipDefaultCheckout() // 删除隐式的checkout scm 语句
        timeout(time:1, unit:'HOURS') // 流水线超时设置为1H
    }

    parameters {
        
        // 基本参数/传参

        string(
            name: "RepoUrl",
            defaultValue: '$GITLAB/mimo-uniapp.git',
            description: '代码仓库地址'
        )

        string(
            name: 'Branch', 
            defaultValue: 'feature_test_1.2.3', 
            description: '默认分支或者Tag'
        )
        
        string(
            name: 'VersionName', 
            defaultValue: '1.2.4', 
            description: '测试维护的版本名称'
        )

        string(
            name: 'VersionCode', 
            defaultValue: '144', 
            description: '测试维护的版本编号'
        )

        string(
            name: 'TargetSDKVersion', 
            defaultValue: '33', 
            description: 'sdk版本号'
        )

        string(
            name: "AppID",
            defaultValue: '__UNI__A876095',
            description: '证书ID'
        )

        // 业务参数/设置默认值

        string(
           name: "AndroidPackageName",
           defaultValue: 'social.cyberflow.mimoapp',
           description: '安卓包名'
        )
        
        string(
           name: "IosBundleID",
           defaultValue: 'social.cyberflow.mimoapp',
           description: 'IOS基带ID'
        )
        
        string(
           name: "CertAlias",
           defaultValue: 'mimo',
           description: '证书别名'
        )
        
        string(
           name: "CertPath",
           defaultValue: '/Users/apple/Documents/ftp/Share/打包证书/线上环境证书/android/mimo.keystore',
           description: '证书路径'
        )
    
        
        string(
           name: "HBuilderAccount",
           defaultValue: 'mmtestapplabs@outlook.com',
           description: 'hbuilder打包账号'
        )

        string(
           name: "HBuilderPassword",
           defaultValue: '1Qaz2!dke2022%~13219!',
           description: 'hbuilder打包账号密码'
        )

        string(
           name: "CertPassword",
           defaultValue: '123456',
           description: '证书密码'
        )

        string(
           name: "IsCustom",
           defaultValue: 'false',
           description: '是否使用自定义基座'
        )

        string(
           name: "Channels",
           defaultValue: 'Default',
           description: '安卓平台要打的渠道包,取值有"google","yyb","360","huawei","xiaomi","oppo","vivo"'
        )

        string(
           name: "IosCertPath",
           defaultValue: '/Users/apple/Documents/ftp/Share/打包证书/线上环境证书/ios/release/mimapp_release_v1.mobileprovision',
           description: 'IOS证书路径'
        )

        string(
           name: "IosCertPassword",
           defaultValue: '123456',
           description: 'IOS证书密码"'
        )

        string(
           name: "P12Path",
           defaultValue: '/Users/apple/Documents/ftp/Share/打包证书/线上环境证书/ios/release/app发布证书.p12',
           description: 'IOS P12 路径'
        )

        string(
           name: "Env",
           defaultValue: 'true',
           description: '后台API环境,true为生产,false为测试'
        )

        string(
           name: "IosSupportedDevice",
           defaultValue: 'iPhone',
           description: 'IOS包支持安装的设备'
        )

        string(
           name: "sonarscanner",
           defaultValue: '/Users/apple/sonar-scanner-4.8.0.2856-macosx/bin/sonar-scanner',
           description: '代码扫描可执行文件目录'
        )

        choice(
            name: 'IMConfig', 
            choices: ['Prod', 'Test'], 
            description: '环信IM配置 Test:测试环境 Prod:生产环境'
        )

        string(
            name: 'FTPAddr', 
            defaultValue: "/Users/apple/Documents/ftp/Share/TestAPP/prod_app", 
            description: '出包地址'
        )

    }

    environment {


        // 传参转为环境变量
        branch = "$params.Branch"
        url = "$params.RepoUrl"
        tag = "$params.VersionName"


    }

    stages{

        stage('检出最新代码.') {
            steps{
                script {
                    tools.GitCheckOut(branch, url)
                }
            }
        }
        stage('判断当前manifest.json文件是否存在试用版插件.'){
            steps{
                script{
                    try {
                        def code = sh(script: "grep 试用 --only-matching ./manifest.json", returnStatus: true)
                        println("code=${code}")
                        if (code == 0 ) {
                            error 'manifest.json存在试用插件，打包终止。'
                        }else{
                            echo "manifest.json不存在试用插件，可以继续打包"
                        }
                    }catch(e) { // input false
                        throw e
                    }
                }
            }
        }
        // stage('输出与最近一次构建的差异.'){
        //     steps{
        //         script{
        //             tools.LastChanges()
        //         }
        //     }
        // }
        stage('打开HbuilderX。'){
            steps{
                
                sh """
echo "Start the hbuilderx"
#export JAVA_HOME=/Library/Java/JavaVirtualMachines/amazon-corretto-11.jdk/Contents/Home
nohup /Applications/HBuilderX.app/Contents/MacOS/HBuilderX >/dev/null 2>&1 &
sleep 3
"""
            }
        }
        stage('重新登录HBuilderX的打包账号。'){
            steps{
                
                sh """
/Applications/HBuilderX.app/Contents/Macos/cli user logout
/Applications/HBuilderX.app/Contents/Macos/cli user login --username \$HBuilderAccount --password \$HBuilderPassword
"""
            }
        }
        stage('通过golang脚本,将参数写入manifest.json和baseUrl.const.js。'){
            steps{
                
                sh """
cd /Users/apple/Documents/git/jenkins/workspace/scripts && git pull && /Users/apple/go/bin/go run getThePackage.go prepare \$Env \$AndroidPackageName \$IosBundleID \$AppID \$VersionName \$VersionCode /Users/apple/Documents/git/jenkins/workspace/prod_mimo_uniapp_pack \$TargetSDKVersion
"""
            }
        }
        stage('调用HBuilderX命令行,进行本地编译并开启云打包。'){
            steps{
                
                sh """
if [ \$Channels == "Default" ]
then
    /Applications/HBuilderX.app/Contents/Macos/cli pack --project /Users/apple/Documents/git/jenkins/workspace/prod_mimo_uniapp_pack --platform android,IOS --android.packagename \$AndroidPackageName --android.androidpacktype 0 --android.certalias \$CertAlias --android.certfile \$CertPath --android.certpassword \$CertPassword --iscustom \$IsCustom --safemode false --ios.bundle \$IosBundleID --ios.supporteddevice \$IosSupportedDevice --ios.isprisonbreak false --ios.profile \$IosCertPath --ios.certfile \$P12Path --ios.certpassword \$IosCertPassword
else
    /Applications/HBuilderX.app/Contents/Macos/cli pack --project /Users/apple/Documents/git/jenkins/workspace/prod_mimo_uniapp_pack --platform android,IOS --android.packagename \$AndroidPackageName --android.androidpacktype 0 --android.certalias \$CertAlias --android.certfile \$CertPath --android.certpassword \$CertPassword --iscustom \$IsCustom --safemode false --android.channels \$Channels --ios.bundle \$IosBundleID --ios.supporteddevice \$IosSupportedDevice --ios.isprisonbreak false --ios.profile \$IosCertPath --ios.certfile \$P12Path --ios.certpassword \$IosCertPassword
fi
"""
            }
        }
        stage('通过golang脚本,调用jenkinsapi获取日志并根据包链接将包下载到FTP指定目录。'){
            steps{
                
                sh """
Branch=`echo \$Branch | sed 's/\\//_/g'`

cd /Users/apple/Documents/git/jenkins/workspace/scripts && git pull
if [ \$Channels == "Default" ]
then
/Users/apple/go/bin/go run getThePackage.go bothDownload prod_mimo_uniapp_pack mimo_\$VersionName.apk mimo_\$VersionName.ipa \$FTPAddr \$IsCustom \$Branch
elif [ \$Channels == "google" ]
then
/Users/apple/go/bin/go run getThePackage.go bothDownload prod_mimo_uniapp_pack mimo_\$VersionName.aab mimo_\$VersionName.ipa \$FTPAddr \$IsCustom \$Branch
else
/Users/apple/go/bin/go run getThePackage.go bothDownload prod_mimo_uniapp_pack mimo_\$VersionName mimo_\$VersionName.ipa \$FTPAddr \$IsCustom \$Branch
fi

"""
            }
        }
    }
    
    post {
        always {
            wrap([$class: 'BuildUser']) {
                script{
                    // 邮件
                    // emailext body: '\$DEFAULT_CONTENT', mimeType: 'text/html', subject: '\$DEFAULT_SUBJECT', to: '\$DEFAULT_RECIPIENTS'
                    // emailext body: '\$DEFAULT_CONTENT', mimeType: 'text/html', subject: '\$DEFAULT_SUBJECT', to: "\${env.BUILD_USER}"
                    //telegram通知
                    result = "${currentBuild.currentResult}"
                        sh """
echo "
#!/bin/bash
MESSAGE='{\\"api\\":\\"m_1691395722\\",\\"time\\":1691397277,\\"data\\":[\\"
### uniapp cloudpack 正式包 ###\\\\\\n
- 执行人: ${env.BUILD_USER}\\\\\\n
- 执行结果: "${currentBuild.currentResult}"\\\\\\n
- 分支: ${env.branch}\\\\\\n
- 版本名称: ${env.tag}\\\\\\n
- 版本编号: ${env.versioncode}\\\\\\n
- 差异: ${env.BUILD_URL}last-changes/\\\\\\n
- 日志: ${env.BUILD_URL}console\\\\\\n
- apk地址: http://192.168.1.161:7050/Share/TestAPP/prod_app/mimo_${env.tag}.apk\\\\\\n
- aab地址: http://192.168.1.161:7050/Share/TestAPP/prod_app/mimo_${env.tag}.aab\\\\\\n
- ipa地址: http://192.168.1.161:7050/Share/TestAPP/prod_app/mimo_${env.tag}.ipa\\\\\\n
\\"],\\"sign\\":\\"b68f5dcd4d2a3d778d282567208e8690\\"}'
echo -n \\\$MESSAGE | nc -u -w1 13.212.162.101 31164
" > ./send.sh && /usr/local/bin/gsed -E -i "s/http:\\/\\/jenkins:8080/https:\\/\\/jenkins.mimo.immo/g" ./send.sh && /bin/bash ./send.sh
    """
                        sh """
echo "stop the hbuilderx"
name=`ps -ef|grep /Applications/HBuilderX.app/Contents/MacOS/HBuilderX|grep -v "nohup"|grep -v "grep"|awk '{printf(\$2)}'`
kill -9 \$name
    """
                }
            }
        }
    }

}
