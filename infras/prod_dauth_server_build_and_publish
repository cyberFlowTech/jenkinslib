@Library('jenkinslib') _  
//调用方法库文件
def tools = new org.devops.tools()
def infras = new org.devops.infras()

def skipRemainingStages = false   //当前节点是否跳过
def input_message   //提示语
def randomToken    //发布秘钥
def skipadminUser = false


pipeline {

    agent {
        label 'master'
    }

    options {
        timestamps() // 在日志中打印时间
        skipDefaultCheckout() // 删除隐式的checkout scm 语句
        timeout(time:1, unit:'HOURS') // 流水线超时设置为1H
    }

    parameters {
        
        // 基本参数/传参

        string(
            name: "RepoUrl",
            defaultValue: '$GITLAB/infras/dauthwallet.git',
            description: '代码仓库地址'
        )

        string(
            name: 'Tag', 
            defaultValue: 'dev', 
            description: '默认分支或者Tag'
        )
        
        choice(
            name: 'Option', 
            choices: ['Deploy'], 
            description: 'Deploy部署指定Tag; Rollback回滚到指定Tag; Expand快速扩容(不保存yaml文件)'
        )

        string(
            name: "Environment",
            defaultValue: 'prod',
            description: '将要发布的环境'
        )

        // 业务参数/设置默认值
        
        string(
           name: "Hostname",
           defaultValue: 'api.infras.online',
           description: '域名'
        )
        
        string(
           name: "Projectname",
           defaultValue: 'infras',
           description: '项目名称'
        )
        
        string(
           name: "Servicename",
           defaultValue: 'dauth',
           description: '服务名称'
        )
    
        
        string(
           name: "Servicepath",
           defaultValue: '/',
           description: '服务对应的路由(通过k8s部署的服务对应的ingress路由)'
        )

        string(
           name: "Arn",
           defaultValue: 'arn:aws:acm:ap-southeast-1:024905375334:certificate/b32b23f9-e1bc-474f-8db5-612aa9a3eb17',
           description: 'aws平台申请的https证书(对应域名)'
        )

        string(
           name: "Comment",
           defaultValue: '新需求特性XXXX;自测结果XXXXX;提测结果XXXXXX',
           description: '发布注释'
        )

    }

    environment {


        // 传参转为环境变量
        tag = "$params.Tag"
        option = "$params.Option"
        url = "$params.RepoUrl"
        envi = "$params.Environment" // dev环境不需要审批
        servicename = "$params.Servicename"
        hostname = "$params.Hostname"
        servicepath = "$params.Servicepath"
        projectname = "$params.Projectname"
        comment = "$params.Comment" // 发布注释
        arn = "$params.Arn"


        //生成随机数0-10000
        max = 100000
        randomToken = "${Math.abs(new Random().nextInt(max+1))}"
        adminUser = "" // 审批人员姓名
        approvalDD = ""   //审批人telegram名称
        approval = "" // 是否需要审批


    }

    stages{

        stage('检出最新代码.') {
            steps{
                script {
                    tools.GitCheckOut(tag, url)
                }
            }
        }

        stage('输出与最近一次构建的差异.'){
            steps{
                script{
                    tools.LastChanges()
                }
            }
        }

        stage('代码静态扫描与接口自动化测试.'){
            steps{
                script{
                    tools.Sonarqube()
                    tools.PostmanAPItest()
                }
            }
        }

        stage("编译/制作镜像.") {
           steps{
                script{
                    infras.BuildImage(option, envi, "024905375334.dkr.ecr.ap-southeast-1.amazonaws.com", "infras", servicename, tag)
                }
            }
        }
        
        stage("发送审批请求,等待审批通过."){
            steps{
                wrap([$class: 'BuildUser']) {
                    script{
                        tools.Approval(envi)
                    }
                }
            } 
        }

        stage('审批通过,推送镜像.'){
            steps{
                script{
                    infras.PushImageToEcr(option, envi, "024905375334.dkr.ecr.ap-southeast-1.amazonaws.com", "infras", servicename, tag)                
                }
            }
        }
    }
    
    post {
        always {
            wrap([$class: 'BuildUser']) {
                script{
                    // 邮件
                    emailext body: '$DEFAULT_CONTENT', mimeType: 'text/html', subject: '$DEFAULT_SUBJECT', to: '$DEFAULT_RECIPIENTS'
                    emailext body: '$DEFAULT_CONTENT', mimeType: 'text/html', subject: '$DEFAULT_SUBJECT', to: "${env.BUILD_USER}"
                    //telegram通知
                    result = "${currentBuild.currentResult}"
                    tools.Notify(envi,result)
                }
            }
        }
    }

}
